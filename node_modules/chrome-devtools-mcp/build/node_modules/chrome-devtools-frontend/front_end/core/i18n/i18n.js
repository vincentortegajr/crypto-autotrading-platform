
export const i18n = {
  registerUIStrings: () => {},
  getLocalizedString: (_, str) => {
    // So that the string passed in gets output verbatim.
    return str;
  },
  lockedLazyString: () => {},
  getLazilyComputedLocalizedString: () => {},
};

// TODO(jacktfranklin): once the DocumentLatency insight does not depend on
// this method, we can remove this stub.
export const TimeUtilities = {
  millisToString(x) {
    const separator = ' ';
    const formatter = new Intl.NumberFormat('en-US', {
      style: 'unit',
      unitDisplay: 'narrow',
      minimumFractionDigits: 0,
      maximumFractionDigits: 1,
      unit: 'millisecond',
    });

    const parts = formatter.formatToParts(x);
    for (const part of parts) {
      if (part.type === 'literal') {
        if (part.value === ' ') {
          part.value = separator;
        }
      }
    }

    return parts.map(part => part.value).join('');
  }
};

// TODO(jacktfranklin): once the ImageDelivery insight does not depend on this method, we can remove this stub.
export const ByteUtilities = {
  bytesToString(x) {
    const separator = ' ';
    const formatter = new Intl.NumberFormat('en-US', {
      style: 'unit',
      unit: 'kilobyte',
      unitDisplay: 'narrow',
      minimumFractionDigits: 1,
      maximumFractionDigits: 1,
    });
    const parts = formatter.formatToParts(x / 1000);
    for (const part of parts) {
      if (part.type === 'literal') {
        if (part.value === ' ') {
          part.value = separator;
        }
      }
    }

    return parts.map(part => part.value).join('');
  }
};